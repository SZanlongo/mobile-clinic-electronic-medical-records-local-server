////  PatientObject.h//  Mobile Clinic////  Created by Steven Berlanga on 2/4/13.//  Copyright (c) 2013 Steven Berlanga. All rights reserved.///** PatientObject class has a few bugs but is otherwise operational. This class is the main class that the user will interact with.  *//** * @defgroup Patient Attributes * * @{ */#define FIRSTNAME   @"firstName"#define FAMILYNAME  @"familyName"#define VILLAGE     @"villageName"#define HEIGHT      @"height"#define SEX         @"sex"#define DOB         @"age"#define PICTURE     @"photo"#define VISITS      @"visits"#define PATIENTID   @"patientId"/** @} */#import "BaseObject.h"#import "NSObject+CustomTools.h"#import "VisitationObject.h"#import "Patients.h"@interface PatientObject : BaseObject{    Patients* patient;}       @property(nonatomic, strong)        VisitationObject* currentVisit;@property(nonatomic, strong)        NSMutableArray* visits;/** * Convenience Method to get the age of the patient. This method performs the logic to calculate the age of the patient since the age is stored as an NSDate object @return The proper age of the patient */- (NSInteger)getAge;/** * Convenience Method to get the usable format of the image. This method converts the NSData picture into a UIImage and returns it. @return The proper version of the picture */- (UIImage *)getPhoto;-(void)setPhoto:(UIImage*)image;/** * Convenience Method that converts the ambiguous age format where Female = 0 & Male = 1  @return The gender of the patient as a human readable string */- (NSString *)getSex;/** * creates a new patient object in the database on initialization. You should call this method if you creating a new patient. Otherwise call the regular init method @return The PatientObject holding a reference to the new patient in the Database */- (id)initWithNewPatient;/** * Stores the new patient in the local and remote database  @onSuccHandler Block call that is fired after the patient is stored in the local database */-(void)createNewPatient:(ObjectResponse)onSuccessHandler;/** * Loads this object with the patient that matches the ID @param patientID the ID of the patient that you are looking for @return if the patient loaded successful then it returns TRUE */-(BOOL)loadPatientWithPatientID:(NSString *)patientID;/** *Searches the local database (Client-side) for patient that has any combination of the first and last name @param firstname the firstname of the patient you are looking for @param lastname the lastname of the patient you are looking for @return All the patients the has the specified first or last name  */-(NSArray*)FindAllPatientsLocallyWithFirstName:(NSString*)firstname andWithLastName:(NSString*)lastname;/** *Searches the Remote database (Server-side) for patient that has any combination of the first and last name and stores it in local database @param firstname the firstname of the patient you are looking for @param lastname the lastname of the patient you are looking for @param eventResponse called when the client updated the database with the server's completed search. You should call, within the block method, FindAllPatientsLocallyWith... method to get the list of patients you are searching for. */-(void)FindAllPatientsOnServerWithFirstName:(NSString *)firstname andWithLastName:(NSString *)lastname onCompletion:(ObjectResponse)eventResponse;/** * Adds a visit to the patient. Call this method when you have a brand new visit for the patient and you are going to save it for the first time. This method will add the patients ID to the visit and associate the visit with the patient by adding it to the patient's relationship. NOTE: This method does not save the visit. You will have to call SaveObject method still @param visitation the visit you want to associate with the patient  */-(void)addVisitToCurrentPatient:(VisitationObject*)visitation;/** * This will give you a list of the visits the patient has made. *@return An array of VisitationObjects which represents the visits o the patient */-(NSArray*)getAllVisitsForCurrentPatient;@end