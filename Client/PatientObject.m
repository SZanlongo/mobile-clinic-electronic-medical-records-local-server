////  PatientObject.m//  Mobile Clinic////  Created by Steven Berlanga on 2/4/13.//  Copyright (c) 2013 Steven Berlanga. All rights reserved.//#define FIRSTNAME   @"firstName"#define FAMILYNAME  @"familyName"#define VILLAGE     @"villageName"#define HEIGHT      @"height"#define SEX         @"sex"#define DOB         @"age"#define PICTURE     @"photo"#define VISITS      @"visits"#define DATABASE    @"Patients"#import "PatientObject.h"#import "StatusObject.h"#import "UIImage+ImageVerification.h"StatusObject* tempObject;@implementation PatientObject- (id)init{    self = [super init];    if (self) {        if (!_visits) {            _visits = [[NSMutableArray alloc]init];        }    }    return self;}#pragma mark- Protocol Methods#pragma mark--(NSDictionary *)consolidateForTransmitting{        NSMutableDictionary* consolidate = [[NSMutableDictionary alloc]initWithCapacity:4];    [consolidate setValue:_firstName forKey:FIRSTNAME];    [consolidate setValue:_familyName forKey:FAMILYNAME];    [consolidate setValue:_village forKey:VILLAGE];    [consolidate setValue:[_picture convertImageToPNGBinaryData] forKey:PICTURE];    [consolidate setValue:_dob forKey:DOB];    [consolidate setValue:[self packagedVisits] forKey:VISITS];    [consolidate setValue:[NSNumber numberWithInt:kPatientType] forKey:OBJECTTYPE];    return consolidate;}-(void)unpackageFileForUser:(NSDictionary *)data{    [super unpackageFileForUser:data];    _firstName = [data objectForKey:FIRSTNAME];    _familyName = [data objectForKey:FAMILYNAME];    _village = [data objectForKey:VILLAGE];    _sex = (int)[data objectForKey:SEX];    _picture = [UIImage imageWithData:[data objectForKey:PICTURE]];    _dob = [data objectForKey:DOB];    [self unpackageVisits:[data objectForKey:VISITS]];}-(void)unpackageDatabaseFileForUser:(NSManagedObject *)object{    [super unpackageDatabaseFileForUser:object];    _village = [self getValueForKey:VILLAGE];    _familyName= [self getValueForKey:FAMILYNAME];    _firstName = [self getValueForKey:FIRSTNAME];    _sex = [[self getValueForKey:SEX]intValue];    _picture = [UIImage imageWithData:[self getValueForKey:PICTURE]];    _dob = [self getValueForKey:DOB];}-(void)saveObject:(ObjectResponse)eventResponse{    respondToEvent = eventResponse;    // Database object needs to exist    if (databaseObject)    {            [super saveObject:^(id<BaseObjectProtocol> data, NSError* error) {            [self addObjectToDatabaseObject:_familyName forKey:FAMILYNAME];            [self addObjectToDatabaseObject:_village forKey:VILLAGE];            [self addObjectToDatabaseObject:_firstName forKey:FIRSTNAME];            [self addObjectToDatabaseObject:[NSNumber numberWithInt:_sex] forKey:SEX];            [self addObjectToDatabaseObject:[_picture convertImageToPNGBinaryData]  forKey:PICTURE];            [self addObjectToDatabaseObject:_dob forKey:DOB];        }];            respondToEvent(self,nil);    }else{        respondToEvent(Nil,[self createErrorWithDescription:@"No Patient has been selected" andErrorCodeNumber:0 inDomain:@"Patient Object"]);    }}-(void)CommonExecution{    NSLog(@"Doesn't need to be implemented Client-side");}#pragma mark- Public Methods#pragma mark--(NSString *)description{    NSString* text = [NSString stringWithFormat:@"\nFirst Name: %@ \nLast Name: %@ \nVillage %@\nObjectType: %i",_firstName,_familyName,_village, self.objectType];    return text;}-(void)createNewPatient:(ObjectResponse)onSuccessHandler{       NSNotificationCenter* center = [NSNotificationCenter defaultCenter];    [center addObserver:self selector:@selector(ActionSuccessfull:) name:GLOBAL_STATUS_LISTENER object:tempObject];        if (!databaseObject) {        // Otherwise create a new object from scratch        [self CreateANewObjectFromClass:DATABASE];    }        PatientObject* me = self;        [self saveObject:^(id<BaseObjectProtocol> data, NSError *error) {                if (!error) {            respondToEvent = onSuccessHandler;                        PatientObject* newData = data;                        NSMutableDictionary* dataToSend = [NSMutableDictionary dictionaryWithDictionary:[newData consolidateForTransmitting]];                        [dataToSend setValue:[NSNumber numberWithInt:kCreateNewPatient] forKey:OBJECTCOMMAND];                        [me.appDelegate.ServerManager sendData:dataToSend];        }            }];    }-(NSInteger)getAge{    return [_dob getNumberOfYearsElapseFromDate];}#pragma mark- Internal Private Methods#pragma mark--(void)ActionSuccessfull:(NSNotification *)notification{        if (tempObject.status == kSuccess) {        // Reset this object with the information brought back through the server        [self unpackageFileForUser:tempObject.data];        // Activate the callback so user knows it was successful        respondToEvent(self, nil);    }else{        respondToEvent(nil,[self createErrorWithDescription:tempObject.errorMessage andErrorCodeNumber:10 inDomain:@"PatientObject"] );    }        // Remove event listener    [[NSNotificationCenter defaultCenter]removeObserver:self];        // Save the new user information that has been returned    [self saveObject:nil];}-(NSMutableArray*)packagedVisits{    NSMutableArray* completeVisits = [[NSMutableArray alloc]initWithCapacity:_visits.count];    for (VisitationObject* visit in _visits) {        [completeVisits addObject:[visit consolidateForTransmitting]];    }return completeVisits;}// Used to unpack all the visits -(NSArray*)unpackageVisits:(NSArray*)packagedVists{    if (!_visits) {        _visits = [[NSMutableArray alloc]initWithCapacity:packagedVists.count];    }        for (NSDictionary* visitInformation in packagedVists) {        VisitationObject* visit = [[VisitationObject alloc]initWithVisit:visitInformation];        [_visits addObject:visit];    }    return _visits;}//May not be needed-(void)addVisitToPatient:(VisitationObject*)visit{    [_visits addObject:visit];}@end